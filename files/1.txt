import telebot
from telebot import types
import os
import json

# Замените 'YOUR_BOT_TOKEN' на токен вашего бота
BOT_TOKEN = '7192346049:AAE3opA04eC8Z87wcoBL7juHbGFC2zL7Z30'
bot = telebot.TeleBot(BOT_TOKEN)

# Словарь для хранения информации о пользователях и файлах
users = {}

# Функция для сохранения файлов на локальном сервере
def save_file(file_info, file_data):
    user_id = file_info['user_id']
    category = file_info['category']
    file_name = file_info['file_name']

    # Создаем директорию для пользователя, если она не существует
    user_dir = os.path.join('files', str(user_id))
    if not os.path.exists(user_dir):
        os.makedirs(user_dir)

    # Создаем директорию для категории, если она не существует
    category_dir = os.path.join(user_dir, category)
    if not os.path.exists(category_dir):
        os.makedirs(category_dir)

    # Сохраняем файл
    file_path = os.path.join(category_dir, file_name)
    with open(file_path, 'wb') as f:
        f.write(file_data)

    # Добавляем информацию о файле в словарь users
    if user_id not in users:
        users[user_id] = {}
    if category not in users[user_id]:
        users[user_id][category] = []
    users[user_id][category].append(file_info)

    # Сохраняем информацию о пользователях и файлах в JSON-файле
    with open('users.json', 'w') as f:
        json.dump(users, f)

# Функция для загрузки файлов с локального сервера
def load_file(file_info):
    user_id = file_info['user_id']
    category = file_info['category']
    file_name = file_info['file_name']

    file_path = os.path.join('files', str(user_id), category, file_name)
    with open(file_path, 'rb') as f:
        file_data = f.read()
    return file_data

# Обработчик команды /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {}
    bot.send_message(user_id, 'Добро пожаловать! Выберите действие:')
    show_menu(message)

# Функция для отображения меню
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('Загрузить файл', 'Скачать файл', 'Список файлов')
    bot.send_message(message.chat.id, 'Меню:', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    text = message.text

    if text == 'Загрузить файл':
        bot.send_message(user_id, 'Введите категорию для файла:')
        bot.register_next_step_handler(message, process_category_selection)

    elif text == 'Скачать файл':
        bot.send_message(user_id, 'Введите категорию и имя файла через /:')
        bot.register_next_step_handler(message, process_file_download)

    elif text == 'Список файлов':
        show_file_list(message)


def process_category_selection(message):
    user_id = message.from_user.id
    category = message.text.strip()

    if category:
        bot.send_message(user_id, f'Отправьте файл для категории "{category}":')
        bot.register_next_step_handler(message, process_file_upload, category)
    else:
        bot.send_message(user_id, 'Категория не может быть пустой.')
        bot.register_next_step_handler(message, process_category_selection)


def process_file_download(message):
    user_id = message.from_user.id
    try:
        category, file_name = message.text.split('/')
    except ValueError:
        bot.send_message(user_id, 'Неверный формат. Введите категорию и имя файла через /.')
        return

    file_info = {'user_id': user_id, 'category': category, 'file_name': file_name}

    # Формируем имя файла для S3
    s3_file_name = f"{user_id}/{category}/{file_name}"

    file_data = download_from_s3(s3_file_name)

    if file_data:
        bot.send_document(user_id, file_data, file_name=file_name)
    else:
        bot.send_message(user_id, 'Файл не найден.')

# Обработчик скачивания файла
def process_file_download(message):
    user_id = message.from_user.id
    try:
        category, file_name = message.text.split('/')
    except ValueError:
        bot.send_message(user_id, 'Неверный формат. Введите категорию и имя файла через /.')
        return

    file_info = {'user_id': user_id, 'category': category, 'file_name': file_name}
    try:
        file_data = load_file(file_info)
        bot.send_document(user_id, file_data, file_name=file_name)
    except FileNotFoundError:
        bot.send_message(user_id, 'Файл не найден.')

# Функция для отображения списка файлов
def show_file_list(message):
    user_id = message.from_user.id
    if user_id not in users or not users[user_id]:
        bot.send_message(user_id, 'У вас нет загруженных файлов.')
        return

    file_list = []
    for category, files in users[user_id].items():
        for file in files:
            file_list.append(f'{category}/{file["file_name"]}')

    if not file_list:
        bot.send_message(user_id, 'У вас нет загруженных файлов.')
    else:
        bot.send_message(user_id, 'Список ваших файлов:\n' + '\n'.join(file_list))

# Запуск бота
bot.polling(none_stop=True)





